<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>RustQC Report for {{ filename }}</title>

  <!-- Fonts and uPlot -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/uplot@1.6.26/dist/uPlot.min.css">
  <script src="https://cdn.jsdelivr.net/npm/uplot@1.6.26/dist/uPlot.iife.min.js"></script>

  <style>
    body {
      font-family: 'Inter', sans-serif;
      background: #f5f7fa;
      padding: 1em;
      display: flex;
      color: #333;
    }

    main {
      width: 75%;
    }

    .card {
      background: white;
      padding: 2em;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    h1 {
      font-size: 2em;
      margin-bottom: 0.5em;
    }

    h2 {
      margin-top: 2.5em;
      font-size: 1.4em;
      border-bottom: 2px solid #eee;
      padding-bottom: 0.2em;
    }

    table {
      border-collapse: collapse;
      width: 100%;
      margin-bottom: 2em;
      border: 1px solid #b69292;
      background-color: #fff;
      border-radius: 6px;
      overflow: hidden;
    }

    th {
      background-color: #fafafa;
      font-weight: 600;
      color: #333;
    }

    td, th {
      padding: 12px 16px;
      border-bottom: 1px solid #eee;
    }

    .plot-container {
      margin: 1em auto;
      max-width: 1100px;
    }

    #toc {
      position: sticky;
      top: 2em;
      margin-left: 2em;
      padding: 1em 1.5em;
      background: #fff;
      border: 1px solid #e0e0e0;
      border-radius: 10px;
      width: 220px;
      font-size: 14px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.06);
    }

    #toc h3 {
      margin-top: 0;
      font-size: 16px;
      color: #333;
    }

    #toc ul {
      list-style: none;
      padding-left: 0;
    }

    #toc li {
      margin-bottom: 0.5em;
    }

    #toc a {
      text-decoration: none;
      color: #3498db;
    }

    #toc a:hover {
      text-decoration: underline;
    }

    small {
      display: block;
      margin-top: 0.5em;
      color: #777;
    }
  </style>
</head>

<body>

<main class="card">
    <h1>RustQC Report</h1>
    <p><strong>Generated by:</strong> {{ username }} on {{ datetime }}</p>
    <h2 id="basic-stats">Basic Statistics</h2>
    <table>
        <tr><th>Filename</th><td>{{ filename }}</td></tr>
        <tr><th>Total Reads</th><td>{{ total_reads }}</td></tr>
        <tr><th>Average Read Length</th><td>{{ avg_length | round(floor=2) }}</td></tr>
        <tr><th>Minimum Read Length</th><td>{{ min_length }}</td></tr>
        <tr><th>Maximum Read Length</th><td>{{ max_length }}</td></tr>
        <tr><th>Mode Read Length</th><td>{{ mode_length }}</td></tr>
        <tr><th>GC Content (%)</th><td>{{ gc_content | round(floor=2) }}</td></tr>
    </table>

    <div class="plot-container">
        <h2 id="per-base-quality">Per-Base Quality</h2>
        <div id="per-base-plot" style="width:100%; height:400px;"></div>
        <small>Drag to zoom. Double-click to reset.</small>
    </div>

    <div class="plot-container">
        <h2 id="read-length-hist">Read Length Histogram</h2>
        <div id="length-hist" style="width:100%; height:400px;"></div>
        <small>Distribution of read lengths.</small>
    </div>

    <div class="plot-container">
        <h2 id="gc-percent-hist">GC Content Per Read</h2>
        <div id="gc-hist" style="width:100%; height:400px;"></div>
        <small>Each bin represents a %GC range.</small>
    </div>

    <div class="plot-container">
        <h2 id="base-composition">Per-Base Sequence Content</h2>
        <div id="base-comp-plot" style="width:100%; height:400px;"></div>
        <small>% of A/T/G/C at each base position.</small>
    </div>


    <div class="plot-container">
        <h2 id="per-seq-qual">Per-Sequence Quality Scores</h2>
        <div id="per-seq-quality-chart" style="width:100%; height:400px;"></div>
        <small>Average quality score per read.</small>
    </div>

    <div class="plot-container">
        <h2 id="n-content">Per-Base N Content</h2>
        <div id="n-content-plot" style="width:200%; height:400px;"></div>
        <small>Percentage of ambiguous bases (N) per position.</small>
    </div>


</main>


<nav id="toc">
  <h3>Contents</h3>
  <ul>
    <li><a href="#basic-stats">Basic Statistics</a></li>
    <li><a href="#per-base-quality">Per-Base Quality</a></li>
    <li><a href="#read-length-hist">Read Length Histogram</a></li>
    <li><a href="#gc-percent-hist">GC Content Histogram</a></li>
    <li><a href="#base-composition">Base Composition</a></li>
    <li><a href="#per-seq-qual">Per-Sequence Quality</a></li>
    <li><a href="#n-content">Per-Base N Content</a></li>
  </ul>
</nav>

<script>
  // Base positions
  const pos = {{ percent_a | length }};
  const basePos = [...Array(pos).keys()].map(i => i + 1);

  // Per-base quality
  const qualities = {{ qualities_per_position | json_encode }};
  new uPlot({
    title: "Per-Base Mean Quality Score",
    width: 1000,
    height: 400,
    legend: {
    show: true,      // âœ… Enable clickable legend
    live: true       // âœ… Let it dynamically reflect toggles
    },
    series: [
      { label: "Base", value: (u,v)=>`${v}` },
      { label: "Quality", stroke: "steelblue", width: 2, value: (u,v)=>v.toFixed(2) }
    ],
    axes: [
      { label: "Base Position", time: false, values: (u,t)=>t.map(v=>v.toFixed(0)) },
      { label: "Mean Quality", range: [0, 45] }
    ],
    cursor: { drag: { x: true, y: false } },
    hooks: { ready: [u => u.root.addEventListener("dblclick", () => u.setScale("x", null))] }
  }, [basePos, qualities], document.getElementById("per-base-plot"));

  // Read length histogram
  const readLenHist = {{ read_length_histogram | json_encode }};
  const lenBins = Object.entries(readLenHist).map(([l,c]) => [parseInt(l), c]).sort((a,b)=>a[0]-b[0]);
  const xLen = lenBins.map(([l,_]) => l);
  const yLen = lenBins.map(([_,c]) => c);

  new uPlot({
  title: "Read Length Histogram",
  width: 1000,
  height: 400,
  legend: {
    show: true,
    live: true
  },
  series: [
    { label: "Length", value: (u,v)=>`Length: ${v}` },
    { label: "Count", stroke: "steelblue", width: 2, fill: "rgba(70,130,180,0.3)", value: (u,v)=>v.toFixed(0) }
  ],
  axes: [
    {
      label: "Read Length",
      time: false,
      values: (u, t) => t.map(v => v.toFixed(0))
    },
    {
      label: "Count"
    }
  ],
  cursor: { drag: { x: true, y: false } },
  hooks: {
    ready: [
      u => {
        u.root.addEventListener("dblclick", () => u.setScale("x", null));

        // ðŸ‘‡ Inject CSS to rotate X-axis labels
        const style = document.createElement("style");
        style.innerHTML = `
          .uplot .xticks > div {
            transform: rotate(-45deg);
            transform-origin: top right;
            white-space: nowrap;
          }
        `;
        document.head.appendChild(style);
      }
    ]
  }
}, [xLen, yLen], document.getElementById("length-hist"));


  // GC% histogram
  const gcHist = {{ gc_percent_histogram | json_encode }};
  const gcBins = Object.entries(gcHist).map(([g,c]) => [parseInt(g), c]).sort((a,b) => a[0] - b[0]);
  const xGC = gcBins.map(([g,_]) => g);
  const yGC = gcBins.map(([_,c]) => c);

  new uPlot({
    title: "GC Content Per Read",
    width: 1000,
    height: 400,
    legend: {
    show: true,      // âœ… Enable clickable legend
    live: true       // âœ… Let it dynamically reflect toggles
    },
    series: [
      { label: "GC %", value: (u,v)=>`${v}` },
      { label: "Count", stroke: "steelblue", width: 2, fill: "rgba(70, 130, 180, 0.3)", value: (u,v)=>v.toFixed(0) }
    ],
    axes: [
      { label: "GC %", time: false, values: (u,t)=>t.map(v=>v.toFixed(0)) },
      { label: "Count" }
    ],
    cursor: { drag: { x: true, y: false } },
    hooks: { ready: [u => u.root.addEventListener("dblclick", () => u.setScale("x", null))] }
  }, [xGC, yGC], document.getElementById("gc-hist"));

  // Base composition
  const A = {{ percent_a | json_encode }};
  const T = {{ percent_t | json_encode }};
  const G = {{ percent_g | json_encode }};
  const C = {{ percent_c | json_encode }};

  new uPlot({
  title: "Per-Base Sequence Content",
  width: 1000,
  height: 400,
  legend: {
    show: true,      // âœ… Enable clickable legend
    live: true       // âœ… Let it dynamically reflect toggles
  },
  series: [
    { label: "Position" },
    { label: "%A", stroke: "#1f77b4", width: 2, show: true },
    { label: "%T", stroke: "#d62728", width: 2, show: true },
    { label: "%G", stroke: "#2ca02c", width: 2, show: true },
    { label: "%C", stroke: "#ff7f0e", width: 2, show: true }
  ],
  axes: [
    { label: "Base Position", time: false, scale: "x", values: (u,t)=>t.map(v=>v.toFixed(0)) },
    { label: "Percentage", scale: "y", range: [0, 100] }
  ],
  cursor: { drag: { x: true, y: false } },
  hooks: {
    ready: [u => {
      u.root.addEventListener("dblclick", () => {
        u.setScale("x", null);
        u.setScale("y", null);
      });
    }]
  }
}, [basePos, A, T, G, C], document.getElementById("base-comp-plot"));

// Per-sequence quality histogram
const psqHist = {{ per_sequence_quality_histogram | json_encode }};
const psqBins = Object.entries(psqHist).map(([q, c]) => [parseInt(q), c]).sort((a, b) => a[0] - b[0]);
const xPSQ = psqBins.map(([q, _]) => q);
const yPSQ = psqBins.map(([_, c]) => c);

new uPlot({
  title: "Per-Sequence Quality Score Distribution",
  width: 1000,
  height: 400,
  legend: {
    show: true,      // âœ… Enable clickable legend
    live: true       // âœ… Let it dynamically reflect toggles
  },
  series: [
    { label: "Quality Score", value: (u, v) => `${v}` },
    {
      label: "Count",
      stroke: "darkorchid",
      width: 2,
      fill: "rgba(153, 50, 204, 0.3)",
      value: (u, v) => v.toFixed(0)
    }
  ],
  axes: [
    { label: "Average Quality", time: false, values: (u, vals) => vals.map(v => v.toFixed(0)) },
    { label: "Read Count" }
  ],
  cursor: { drag: { x: true, y: false } },
  hooks: {
    ready: [u => u.root.addEventListener("dblclick", () => u.setScale("x", null))]
  }
}, [xPSQ, yPSQ], document.getElementById("per-seq-quality-chart"));

const nContent = {{ n_content | json_encode }};

new uPlot({
  title: "Per-Base N Content",
  width: 1000,
  height: 400,
  legend: {
    show: true,      // âœ… Enable clickable legend
    live: true       // âœ… Let it dynamically reflect toggles
  },
  series: [
    { label: "Position" },
    { label: "%N", stroke: "purple", width: 2, value: (u,v)=>v.toFixed(2) }
  ],
  axes: [
    { label: "Base Position", time: false, values: (u,t)=>t.map(v=>v.toFixed(0)) },
    { label: "% N", range: [0, 100] }
  ],
  cursor: { drag: { x: true, y: false } },
  hooks: { ready: [u => u.root.addEventListener("dblclick", () => u.setScale("x", null))] }
}, [basePos, nContent], document.getElementById("n-content-plot"));




</script>

</body>
</html>
